{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","App.tsx","index.tsx"],"names":["PostsList","posts","setSelectedPostId","selectedPostId","className","map","post","userId","title","type","onClick","id","BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","getPosts","NewCommentForm","loadComments","useState","name","setName","email","setEmail","comment","setComment","addComment","postId","method","headers","body","JSON","stringify","onSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","isClicked","setIsClicked","setPost","comments","setComments","useEffect","length","App","setValue","setPosts","users","setUsers","useMemo","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.239705e7.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[],\n  setSelectedPostId: (id: number | null) => void,\n  selectedPostId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, setSelectedPostId, selectedPostId,\n}) => {\n  const clickHandler = (id: number) => {\n    if (selectedPostId === id) {\n      setSelectedPostId(null);\n    } else {\n      setSelectedPostId(id);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => clickHandler(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getPosts = () => request('/posts');\n\nexport const getUsers = () => request('/users');\n\nexport const getUserPosts = (userId: number) => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: number) => request(`/posts/${postId}`);\n","import React, { FormEvent, useState } from 'react';\nimport { request } from '../../api/posts';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number,\n  loadComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  loadComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const clear = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const addComment = (postId: number) => {\n    return request(`/comments?postId=${postId}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        body: comment,\n        postId,\n      }),\n    })\n      .then(() => {\n        loadComments();\n        clear();\n      });\n  };\n\n  const submitHandler = (event: FormEvent) => {\n    event.preventDefault();\n    addComment(selectedPostId);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={(event) => setComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments } from '../../api/comments';\nimport { getPostDetails, request } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [isClicked, setIsClicked] = useState<boolean>(true);\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const loadComments = () => {\n    getPostComments(selectedPostId)\n      .then(res => setComments(res));\n  };\n\n  const deleteComment = (id: number) => {\n    return request(`/comments/${id}`, { method: 'DELETE' })\n      .then(() => loadComments());\n  };\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(res => setPost(res));\n    loadComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        {post && <p>{post.title}</p>}\n      </section>\n\n      <section className=\"PostDetails__comments\" data-cy=\"postList\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setIsClicked(!isClicked)}\n        >\n          {isClicked ? 'Hide comments' : 'Show comments'}\n        </button>\n\n        {isClicked && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n            {comments.length === 0 && 'No comments yet'}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            loadComments={loadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './posts';\n\nexport function getPostComments(postId: number) {\n  return request(`/comments?postId=${postId}`);\n}\n","import React, {\n  ChangeEvent, useEffect, useMemo, useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getPosts, getUsers } from './api/posts';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const selectHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    setValue(+event.target.value);\n    setSelectedPostId(null);\n  };\n\n  useEffect(() => {\n    getPosts()\n      .then(res => setPosts(res));\n    getUsers()\n      .then(res => setUsers(res));\n  }, []);\n\n  useMemo(() => {\n    if (value === 0) {\n      getPosts()\n        .then(res => setPosts(res));\n    } else {\n      getUserPosts(value)\n        .then(res => setPosts(res));\n    }\n  }, [value]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={value}\n            onChange={selectHandler}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setSelectedPostId={(id: number | null) => setSelectedPostId(id)}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && (\n            <PostDetails selectedPostId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}